#################################
# List all non-standard packages to be imported by your 
# script here (only missing packages will be installed)
from ayx import Package
#Package.installPackages(['pandas','numpy'])


#################################
from ayx import Alteryx
import pandas as pd
import numpy as np
import os
import json
from sqlalchemy import create_engine

# R1625
os.environ['TNS_ADMIN'] = r'C:\Oracle2\instantclient_21_13\network\admin'
with open(r'\\10.161.85.66\Home\Share\Alteryx_Admin\Configuration\Connection\db_config_main.json') as config_file:
    config = json.load(config_file)
    
username = config['username']
password = config['password']

service_name = "R1625"

dsn = f"oracle+cx_oracle://{username}:{password}@{service_name}"
    
engine1 = create_engine(dsn, max_identifier_length=128)

# 1625dm
os.environ['TNS_ADMIN'] = r'C:\Oracle2\instantclient_21_13\network\admin'
with open(r'\\10.161.85.66\Home\Share\Alteryx_Admin\Configuration\Connection\db_config_datamart.json') as config_file:
    config = json.load(config_file)
    
username = config['username']
password = config['password']

service_name = "1625dm"

dsn = f"oracle+cx_oracle://{username}:{password}@{service_name}"
    
engine2 = create_engine(dsn, max_identifier_length=128)


#################################
import time

start_time = time.time()

acctcommon = "SELECT * FROM OSIBANK.WH_ACCTCOMMON"
acctloan = "SELECT * FROM OSIBANK.WH_ACCTLOAN"
loans = "SELECT * FROM OSIBANK.WH_LOANS"
househldacct = "SELECT * FROM OSIEXTN.HOUSEHLDACCT"


with engine1.connect() as connection:
    acctcommon = pd.read_sql(acctcommon, connection)
    acctloan = pd.read_sql(acctloan, connection)
    loans = pd.read_sql(loans, connection)
    househldacct = pd.read_sql(househldacct, connection)

print(f"Query took {time.time() - start_time} seconds.")


#################################
### This is a field lookup query. This is not included in production code.
# import time

# start_time = time.time()

# all_fields = "SELECT * FROM sys.all_tab_columns col"


# with engine1.connect() as connection:
#     all_fields = pd.read_sql(all_fields, connection)
    
# print(f"Query took {time.time() - start_time} seconds.")


#################################
# temp_df = all_fields[all_fields['column_name'].str.contains('household', case=False, na=False)]
# temp_df


#################################
# Active/NPFM products
df1 = acctcommon[acctcommon['curracctstatcd'].isin(['ACT','NPFM'])]

# CML loans
df2 = df1[df1['mjaccttypcd'].isin(['CML'])]

# Merging and dropping blank fields
df2 = pd.merge(df2, acctloan, on='acctnbr', how='left', suffixes=('_df2', '_acctloan'))
df2 = pd.merge(df2, loans, on='acctnbr', how='left', suffixes=('_df2', '_loans'))
df2 = df2.dropna(axis=1, how='all')

# Data Cleansing
df2['totalpctsold'] = df2['totalpctsold'].fillna(0)
df2['availbalamt'] = df2['availbalamt'].fillna(0)
df2['credlimitclatresamt'] = df2['credlimitclatresamt'].fillna(0)

# Total Exposure Calculation
df2['bookbalance'] = np.where(df2['currmiaccttypcd'].isin(['CM45']), df2['notebal'], df2['bookbalance'])
df2['Net Balance'] = df2['bookbalance'] - df2['cobal']
df2['Net Available'] = df2['availbalamt'] * (1 - df2['totalpctsold'])
df2['Net Collateral Reserve'] = df2['credlimitclatresamt'] * (1 - df2['totalpctsold'])
df2['Total Exposure'] = df2['Net Balance'] + df2['Net Available'] + df2['Net Collateral Reserve']

# Appending Household Number
df2 = pd.merge(df2, househldacct, on='acctnbr', how='left', suffixes=('_df2', '_househldacct'))

# Grouping by Household and Summing Exposure
household_grouping_df = df2.groupby('householdnbr')['Total Exposure'].sum().reset_index()
household_grouping_df = pd.DataFrame(household_grouping_df)

# Appending Total Household Exposure
df2 = pd.merge(df2, household_grouping_df, on='householdnbr', how='left', suffixes=('_df2','_hhgroup'))

# Filtering down to target products
df2 = df2[df2['currmiaccttypcd'].isin(["CM06","CM11","CM30","CM52","CM57","CM62","CM71","CM76"])]
df2 = df2[(df2['creditlimitamt'] <= 500000) & (df2['Total Exposure_hhgroup'] <= 1000000)]

