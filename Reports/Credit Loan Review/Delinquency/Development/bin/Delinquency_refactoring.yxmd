<?xml version="1.0"?>
<AlteryxDocument yxmdVer="2022.3">
  <Nodes>
    <Node ToolID="1">
      <GuiSettings Plugin="AlteryxBasePluginsGui.DbFileInput.DbFileInput">
        <Position x="54" y="103" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <Passwords />
          <File OutputFileName="" RecordLimit="" SearchSubDirs="False" FileFormat="25">H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`</File>
          <FormatSpecificOptions>
            <FirstRowData>False</FirstRowData>
            <ImportLine>1</ImportLine>
          </FormatSpecificOptions>
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText>Delinquency_withMajor.xlsx
Query=`Sheet1$`</DefaultAnnotationText>
          <Left value="False" />
        </Annotation>
        <MetaInfo connection="Output">
          <RecordInfo>
            <Field name="Product Family" size="255" source="File: H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`" type="V_String" />
            <Field name="Account Number" size="255" source="File: H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`" type="V_String" />
            <Field name="Product Name" size="255" source="File: H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`" type="V_String" />
            <Field name="Customer Name" size="255" source="File: H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`" type="V_String" />
            <Field name="Responsibility Officer" size="255" source="File: H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`" type="V_String" />
            <Field name="YTD Over 30" source="File: H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`" type="Double" />
            <Field name="YTD Over 60" source="File: H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`" type="Double" />
            <Field name="YTD Over 90" source="File: H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`" type="Double" />
            <Field name="YTD Over 120" source="File: H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`" type="Double" />
            <Field name="NDPD" source="File: H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`" type="Double" />
            <Field name="Current Balance" source="File: H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`" type="Double" />
            <Field name="Charged Off" source="File: H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`" type="Double" />
            <Field name="Net Balance" source="File: H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`" type="Double" />
            <Field name="Risk" size="255" source="File: H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`" type="V_String" />
            <Field name="Non Accrual" size="255" source="File: H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`" type="V_String" />
            <Field name="Total Amount Due" source="File: H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`" type="Double" />
            <Field name="Next Payment Due Date" source="File: H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`" type="Date" />
            <Field name="Major" size="255" source="File: H:\FinishedReports\RC\Delinquency\Sources\iDashboard_Appended\Delinquency_withMajor.xlsx|||`Sheet1$`" type="V_String" />
          </RecordInfo>
        </MetaInfo>
      </Properties>
      <EngineSettings EngineDll="AlteryxBasePluginsEngine.dll" EngineDllEntryPoint="AlteryxDbFileInput" />
    </Node>
    <Node ToolID="2">
      <GuiSettings Plugin="AlteryxBasePluginsGui.AlteryxSelect.AlteryxSelect">
        <Position x="174" y="103" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <OrderChanged value="False" />
          <CommaDecimal value="False" />
          <SelectFields>
            <SelectField field="*Unknown" selected="True" />
          </SelectFields>
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
      <EngineSettings EngineDll="AlteryxBasePluginsEngine.dll" EngineDllEntryPoint="AlteryxSelect" />
    </Node>
    <Node ToolID="5">
      <GuiSettings Plugin="JupyterCode">
        <Position x="270" y="199" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <WorkflowName>h:\finishedreports\rc\delinquency\workflow\delinquency_refactoring.yxmd</WorkflowName>
          <JupyterProduction>false</JupyterProduction>
          <vEnvName>designerbasetools_venv</vEnvName>
          <DefaultVenv>1</DefaultVenv>
          <productionModeScript>#################################
# List all non-standard packages to be imported by your 
# script here (only missing packages will be installed)
from ayx import Package
# Package.installPackages(['openpyxl'])


#################################
"""
    Delinquency Report
    @author: Chad Doorley
"""

# This report automates a 30 minute task in Loan Review
# This is attached to loan review's monthly resolution package


""" Documentation Legend

###: Global Specific
 ##: Section Specific
  #: Details
---: New section

Variable definitions
# 'CNS' = Consumer
# '(N)DPD' = (Number of) Days Past Due
# 90plus, 60to89, 30to59, 15to29 = 90+ days past due, 60-89 days, etc...

    Workflow Outline:
    1. environment setup
    2. inputs (iDashboard &lt;-&gt; COCC)
    3. pre-processing
    4. ETL (pandas dataframe)
    5. joining the data
    6. Formatting
    7. Write to Excel


"""

### Environment Setup
from ayx import Alteryx
import pandas as pd
import numpy as np
from openpyxl import load_workbook
from openpyxl.styles import Font, Border, Side, Alignment
from openpyxl.styles.numbers import NumberFormat
import os
from datetime import datetime, timedelta


### Inputs --------------------------------------------------------------
df = Alteryx.read("#1") # Currently iDashboard-generated

### Pre-Processing --------------------------------------------------------------
df = df.drop('Product Family',axis=1) # Product Family Column (first column) is removed

columns_to_sum = ['Current Balance','Charged Off','Net Balance'] # This will allow me to reference these specific columns for later sum() calls

# Sum Function - Reusable
def sum_function(current_df,total_title):
    """ Sum Function
    
    Description:
    - This reusable function will count the number of records and sum the columns specified in
      the 'columns_to_sum' variable.
    
    Arguments:
    - current_df: A dataframe is passed in. It must have 'NDPD','Current Balance','Charged Off',
      and 'Net Balance' columns.
    - total_title: The summed row will need a label placed in the left most column. This is
      explicitly passed into the function as a string
      
    Returns:
    - summed_df: A new dataframe with only 1 row is created. with null values for all 
    
    """
    ndpd_count = len(current_df) # Counts the number of records in the dataframe
    sums = current_df[columns_to_sum].sum().to_dict() # Converts the sums for targeted columns as a python dictionary
    new_dictionary = {col: [sums.get(col, np.nan)] for col in current_df.columns} # Creates a new sum row to insert, with Null values for all other columns
    new_dictionary['NDPD'] = [ndpd_count]
    new_dictionary[current_df.columns[0]] = [total_title]
    summed_df = pd.DataFrame(new_dictionary)
    return summed_df

# Join Function - Reusable
def join_function(section_title, subsection_title, current_section, summed_row):
    """ Join Function
    
    Description:
    - This reusable function will concatenate several dataframes together in a set order
    
    Arguments:
    - section_title: This is the major header for each section, like 'CONSUMER LOANS'
    - subsection_title: This is the subheader, such as '90+ Days Past Due'
    - current_section: The filtered data (df1) is passed in, containing the specific items
    - summed_row: The summed row is a result of the other 'Sum Function' and is the last row in each section
    """
    dataframes = []
    if section_title is not None:
        dataframes.append(section_title) # 'None' is passed as an argument for sections where there is no section header
    dataframes.append(subsection_title) # The other three arguments are required
    dataframes.append(current_section) 
    dataframes.append(summed_row)
    joined_df = pd.concat(dataframes, ignore_index=True)
    return joined_df # This sequence is repeated throughout workflow to join dataframes in a set structure

# Remove Leading/Trailing Whitespace
def strip_if_string(value):
    """This function removes leading and trailing whitespace from all string values in a dataframe"""
    if isinstance(value, str):
        return value.strip() # If it is a string, it will remove leading/trailing whitespace
    return value # Otherwise, it just return the value
    
# Data Cleaning
df = df.applymap(strip_if_string) # The 'strip_if_string' is applied to all values in the dataframe

# Most recent month end
today = datetime.today()
if today.day == 1:
    most_recent_month_end = today - timedelta(days=1)
else:
    most_recent_month_end = today.replace(day=1) - timedelta(days=1)
most_recent_month_end_str = most_recent_month_end.strftime("%m/%d/%y")

### Section Outline --------------------------------------------------------------


## Section Title - Consumer Loans, 90+ Days Past Due 

# Variable definition
# This structure is repeated throughout the workflow.
df1_condition = (df['Product Name'].isin(['Unsecured Loans','Unsecured HEAT Loans',"Flexi PRA's",'TMLP Saves Loan'])) &amp; (df['NDPD'] &gt;= 90)
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data' # This data is labelled for formatting later on

# Descriptive Labels
section_title = pd.DataFrame([['CONSUMER LOANS'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
section_title['Tag Type'] = 'title'
subsection_title = pd.DataFrame([['90+ DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 90+ DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
cns_90plus = completed_df # Consumer 90+ dataframe is stored in memory, to be used later on in the report output


## Section Title - Consumer Loans, 60-89 Days Past Due
# Variable definition
df1_condition = (df['Product Name'].isin(['Unsecured Loans','Unsecured HEAT Loans',"Flexi PRA's",'TMLP Saves Loan'])) &amp; (df['NDPD'] &gt;= 60) &amp; (df['NDPD'] &lt;= 89)
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = None
subsection_title = pd.DataFrame([['60-89 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 60-89 DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
cns_60to89 = completed_df


## Section Title - Consumer Loans, 30-59 Days Past Due

# Variable definition
df1_condition = (df['Product Name'].isin(['Unsecured Loans','Unsecured HEAT Loans',"Flexi PRA's",'TMLP Saves Loan'])) &amp; (df['NDPD'] &gt;= 30) &amp; (df['NDPD'] &lt;= 59)
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = None
subsection_title = pd.DataFrame([['30-59 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 30-59 DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
cns_30to59 = completed_df


## Section Title - Consumer Loans, 15-29 Days Past Due

# Variable definition
df1_condition = (df['Product Name'].isin(['Unsecured Loans','Unsecured HEAT Loans',"Flexi PRA's",'TMLP Saves Loan'])) &amp; (df['NDPD'] &gt;= 15) &amp; (df['NDPD'] &lt;= 29)
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = None
subsection_title = pd.DataFrame([['15-29 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 15-29 DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
cns_15to29 = completed_df


## Section Title - HOME EQUITY LINE OF CREDIT, 90+ Days Past Due

# Variable definition
df1_condition = (df['Product Name'].isin(['Equity Line of Credit','Special HELOC'])) &amp; (df['NDPD'] &gt;= 90)
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = pd.DataFrame([['HOME EQUITY LINE OF CREDIT'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
section_title['Tag Type'] = 'title'
subsection_title = pd.DataFrame([['90+ DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 90+ DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
heloc_90plus = completed_df


## Section Title - HOME EQUITY LINE OF CREDIT, 60-89 Days Past Due

# Variable definition
df1_condition = (df['Product Name'].isin(['Equity Line of Credit','Special HELOC'])) &amp; (df['NDPD'] &gt;= 60) &amp; (df['NDPD'] &lt;= 89)
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = None
subsection_title = pd.DataFrame([['60-89 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 60-89 DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
heloc_60to89 = completed_df


## Section Title - HOME EQUITY LINE OF CREDIT, 30-59 Days Past Due

# Variable definition
df1_condition = (df['Product Name'].isin(['Equity Line of Credit','Special HELOC'])) &amp; (df['NDPD'] &gt;= 30) &amp; (df['NDPD'] &lt;= 59)
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = None
subsection_title = pd.DataFrame([['30-59 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 30-59 DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
heloc_30to59 = completed_df


## Section Title - HOME EQUITY LINE OF CREDIT, 15-29 Days Past Due

# Variable definition
df1_condition = (df['Product Name'].isin(['Equity Line of Credit','Special HELOC'])) &amp; (df['NDPD'] &gt;= 15) &amp; (df['NDPD'] &lt;= 29)
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = None
subsection_title = pd.DataFrame([['15-29 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 15-29 DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
heloc_15to29 = completed_df


## Section Title - INDIRECT, 90+ Days Past Due

# Variable definition
df1_condition = (df['Product Name'].str.contains('Indirect',case=False, na=False)) &amp; (df['NDPD'] &gt;= 90)
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = pd.DataFrame([['INDIRECT LOANS'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
section_title['Tag Type'] = 'title'
subsection_title = pd.DataFrame([['90+ DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 90+ DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
indirect_90plus = completed_df



## Section Title - INDIRECT, 60-89 Days Past Due

# Variable definition
df1_condition = (df['Product Name'].str.contains('Indirect',case=False, na=False)) &amp; (df['NDPD'] &gt;= 60) &amp; (df['NDPD'] &lt;= 89)
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = None
subsection_title = pd.DataFrame([['60-89 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 60-89 DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
indirect_60to89 = completed_df


## Section Title - INDIRECT, 30-59 Days Past Due

# Variable definition
df1_condition = (df['Product Name'].str.contains('Indirect',case=False, na=False)) &amp; (df['NDPD'] &gt;= 30) &amp; (df['NDPD'] &lt;= 59)
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = None
subsection_title = pd.DataFrame([['30-59 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 30-59 DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'
# df1 = None # This makes this section subtotal only, as it would exhaustive to show all of them
completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
indirect_30to59 = completed_df


## Section Title - INDIRECT, 15-29 Days Past Due

# Variable definition
df1_condition = (df['Product Name'].str.contains('Indirect',case=False, na=False)) &amp; (df['NDPD'] &gt;= 15) &amp; (df['NDPD'] &lt;= 29)
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = None
subsection_title = pd.DataFrame([['15-29 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 15-29 DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'
# df1 = None # This makes this section subtotal only, as it would exhaustive to show all of them
completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
indirect_15to29 = completed_df


## Section Title - RESIDENTIAL, 90+ Days Past Due

# Variable definition
df1_condition = (df['Major'] == 'MTG') &amp; (~df['Product Name'].isin(['Equity Line of Credit','Special HELOC'])) &amp; (df['NDPD'] &gt;= 90)
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = pd.DataFrame([['RESIDENTIAL MORTGAGES'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
section_title['Tag Type'] = 'title'
subsection_title = pd.DataFrame([['90+ DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 90+ DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
resi_90plus = completed_df


## Section Title - RESIDENTIAL, 60-89 Days Past Due

# Variable definition
df1_condition = (df['Major'] == 'MTG') &amp; (~df['Product Name'].isin(['Equity Line of Credit','Special HELOC'])) &amp; (df['NDPD'] &gt;= 60) &amp; (df['NDPD'] &lt;= 89)
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = None
subsection_title = pd.DataFrame([['60-89 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 60-89 DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
resi_60to89 = completed_df

## Section Title - RESIDENTIAL, 30-59 Days Past Due

# Variable definition
df1_condition = (df['Major'] == 'MTG') &amp; (~df['Product Name'].isin(['Equity Line of Credit','Special HELOC'])) &amp; (df['NDPD'] &gt;= 30) &amp; (df['NDPD'] &lt;= 59)
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = None
subsection_title = pd.DataFrame([['30-59 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 30-59 DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
resi_30to59 = completed_df


## Section Title - RESIDENTIAL, 15-29 Days Past Due

# Variable definition
df1_condition = (df['Major'] == 'MTG') &amp; (~df['Product Name'].isin(['Equity Line of Credit','Special HELOC'])) &amp; (df['NDPD'] &gt;= 15) &amp; (df['NDPD'] &lt;= 29)
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = None
subsection_title = pd.DataFrame([['15-29 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 15-29 DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
resi_15to29 = completed_df # By this point, all residential loans are captured and stored in memory


## Section Title - COMMERCIAL, 90+ Days Past Due

# Variable definition
df1_condition = (df['Major'] == 'CML') &amp; (df['Net Balance'] != 0) &amp; (df['NDPD'] &gt;= 90) # This captures CML loans with a non-zero Net Balance. Those with a $0 Balance are captured in another section below
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = pd.DataFrame([['COMMERCIAL LOANS'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
section_title['Tag Type'] = 'title'
subsection_title = pd.DataFrame([['90+ DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 90+ DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
cml_90plus = completed_df


## Section Title - COMMERCIAL, 60-89 Days Past Due

# Variable definition
df1_condition = (df['Major'] == 'CML') &amp; (df['Net Balance'] != 0) &amp; (df['NDPD'] &gt;= 60) &amp; (df['NDPD'] &lt;= 89) # This captures CML loans with a non-zero Net Balance. Those with a $0 Balance are captured in another section below
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = None
subsection_title = pd.DataFrame([['60-89 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 60-89 DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
cml_60to89 = completed_df


## Section Title - COMMERCIAL, 30-59 Days Past Due

# Variable definition
df1_condition = (df['Major'] == 'CML') &amp; (df['Net Balance'] != 0) &amp; (df['NDPD'] &gt;= 30) &amp; (df['NDPD'] &lt;= 59) # This captures CML loans with a non-zero Net Balance. Those with a $0 Balance are captured in another section below
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = None
subsection_title = pd.DataFrame([['30-59 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 30-59 DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
cml_30to59 = completed_df


## Section Title - COMMERCIAL, 15-29 Days Past Due

# Variable definition
df1_condition = (df['Major'] == 'CML') &amp; (df['Net Balance'] != 0) &amp; (df['NDPD'] &gt;= 15) &amp; (df['NDPD'] &lt;= 29) # This captures CML loans with a non-zero Net Balance. Those with a $0 Balance are captured in another section below
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = None
subsection_title = pd.DataFrame([['15-29 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 15-29 DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
cml_15to29 = completed_df


## Section Title - COMMERCIAL PEM, 90+ Days Past Due

# Variable definition
df1_condition = (df['Risk'].str.contains('3P',case=False, na=False)) &amp; (df['NDPD'] &gt;= 90) # This captures CML loans with a non-zero Net Balance. Those with a $0 Balance are captured in another section below
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = pd.DataFrame([['COMMERCIAL LOANS - PORTFOLIO EXCEPTIONS MANAGED'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
section_title['Tag Type'] = 'title'
subsection_title = pd.DataFrame([['90+ DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 90+ DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
pem_90plus = completed_df


## Section Title - COMMERCIAL PEM, 60-89 Days Past Due

# Variable definition
df1_condition = (df['Risk'].str.contains('3P',case=False, na=False)) &amp; (df['NDPD'] &gt;= 60) &amp; (df['NDPD'] &lt;= 89) # This captures CML loans with a non-zero Net Balance. Those with a $0 Balance are captured in another section below
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = None
subsection_title = pd.DataFrame([['60-89 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 60-89 DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
pem_60to89 = completed_df


## Section Title - COMMERCIAL PEM, 30-59 Days Past Due

# Variable definition
df1_condition = (df['Risk'].str.contains('3P',case=False, na=False)) &amp; (df['NDPD'] &gt;= 30) &amp; (df['NDPD'] &lt;= 59) # This captures CML loans with a non-zero Net Balance. Those with a $0 Balance are captured in another section below
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = None
subsection_title = pd.DataFrame([['30-59 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 30-59 DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
pem_30to59 = completed_df


## Section Title - COMMERCIAL PEM, 15-29 Days Past Due

# Variable definition
df1_condition = (df['Risk'].str.contains('3P',case=False, na=False)) &amp; (df['NDPD'] &gt;= 15) &amp; (df['NDPD'] &lt;= 29) # This captures CML loans with a non-zero Net Balance. Those with a $0 Balance are captured in another section below
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = None
subsection_title = pd.DataFrame([['15-29 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns
subsection_title['Tag Type'] = 'subtitle'

# Completed Section
summed_row = sum_function(df1,'TOTAL 15-29 DAYS PAST DUE')
summed_row['Tag Type'] = 'sum'

completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
pem_15to29 = completed_df


## Section Title - COMMERCIAL NET BALANCE PAID OR REDUCED TO $0

# Variable definition
df1_condition = (df['Major'] == 'CML') &amp; (df['Net Balance'] == 0) # This captures CML loans where Net Balance is paid or reduced to $0
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = pd.DataFrame([['NET BALANCE PAID or REDUCED TO $O'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns)
section_title['Tag Type'] = 'title'
subsection_title = None 


# Completed Section
summed_row = None
completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
netbalancezero = completed_df


## Section Title - REPOSSESSED

# Variable definition
df1_condition = (df['Product Name'].str.contains('Repossessed Collateral', case=False, na=False)) # Repo Loans
df1 = df.loc[df1_condition].copy()
df1 = df1.sort_values(by='NDPD', ascending=False)
df1['Tag Type'] = 'data'

# Descriptive Labels
section_title = pd.DataFrame([['REPOSSESSED'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns)
section_title['Tag Type'] = 'title'
subsection_title = None 

# Completed Section
summed_row = None
completed_df = join_function(section_title, subsection_title, df1, summed_row)

# Save df to memory
repo = completed_df


### Combined and Completed Report --------------------------------------------------------------
# Here all dfs are stored in a list
all_dfs = [cns_90plus,cns_60to89,cns_30to59,cns_15to29,heloc_90plus,heloc_60to89,heloc_30to59,heloc_15to29,indirect_90plus,indirect_60to89,indirect_30to59,indirect_15to29,resi_90plus,resi_60to89,resi_30to59,resi_15to29,cml_90plus,cml_60to89,cml_30to59,cml_15to29,pem_90plus,pem_60to89,pem_30to59,pem_15to29,netbalancezero,repo]

concat_dfs = [] # Empty list to store dataframes

for i,df in enumerate(all_dfs):
    concat_dfs.append(df) # Each dataframe
    if i &lt; len(all_dfs) - 1:
        concat_dfs.append(pd.DataFrame([[None]*df.shape[1]], columns=df.columns)) # Null row
    
completed_df = pd.concat(concat_dfs, ignore_index=True)

### WRITING TO EXCEL --------------------------------------------------------------

## Set Directory and Filename
output_dir = r"\\10.161.85.66\Home\Share\Line of Business_Shared Services\Commercial Credit\FinishedReports\RC\Delinquency\OUTPUT"
os.makedirs(output_dir, exist_ok=True)
filename = "Delinquency.xlsx"
output_file = os.path.join(output_dir,filename)

with pd.ExcelWriter(output_file, engine='openpyxl', mode='w') as writer:
    completed_df.to_excel(writer, index=False, sheet_name='Sheet1', startrow=4)

wb = load_workbook(output_file)
ws = wb.active

## Define Formatting
# Dimensions
ws.row_dimensions[5].height = 44

ws.column_dimensions['A'].width = 13
ws.column_dimensions['B'].width = 29
ws.column_dimensions['C'].width = 32
ws.column_dimensions['D'].width = 20
ws.column_dimensions['E'].width = 5
ws.column_dimensions['F'].width = 5
ws.column_dimensions['G'].width = 5
ws.column_dimensions['H'].width = 5
ws.column_dimensions['I'].width = 6
ws.column_dimensions['J'].width = 12
ws.column_dimensions['K'].width = 10
ws.column_dimensions['L'].width = 12
ws.column_dimensions['M'].width = 29
ws.column_dimensions['N'].width = 8
ws.column_dimensions['O'].width = 13
ws.column_dimensions['P'].width = 10
ws.column_dimensions['Q'].width = 46



# Font
upper_section_font = Font(size=14, name='Calibri', bold=True, italic=True)
title_font = Font(size=12, name='Arial', bold=True)
subtitle_font = Font(size=10, name='Arial', bold=True)
data_font = Font(size=10, name='Arial')
sum_font = Font(size=10, name='Arial', bold=True)
wrap_alignment = Alignment(wrap_text=True, vertical='bottom', horizontal='center')
comma_format = '#,##0'
short_date_format = 'MM/DD/YYYY'


# Border
double_border = Border(bottom=Side(style='double'))

# Header
ws['A1'] = "BRISTOL COUNTY SAVINGS BANK"
ws['A1'].font = upper_section_font
ws['A2'] = "MONTHLY DELINQUENCY REPORT"
ws['A2'].font = upper_section_font
ws['A3'] = f"AS OF {most_recent_month_end_str}"
ws['A3'].font = upper_section_font



# Clean out Column Q
for row in ws.iter_rows(min_row=1, max_row=ws.max_row, min_col=17, max_col=17):
    for cell in row:
        cell.value = None
        

# Center Align Columns E:I
for col in range(5,10):
    for cell in ws.iter_cols(min_col=col, max_col=col, min_row=1, max_row=ws.max_row):
        for c in cell:
            c.alignment = Alignment(horizontal='center')
            
# Center Align Columns M:N
for col in range(13,15):
    for cell in ws.iter_cols(min_col=col, max_col=col, min_row=1, max_row=ws.max_row):
        for c in cell:
            c.alignment = Alignment(horizontal='center')

# for cell in ws['P']:
#     cell.number_format = NumberFormat('%m/%d/%y')

## Iterate over rows and apply formatting
for cell in ws[5]:
    cell.alignment = wrap_alignment
    
start_row = 6 # This is a counter variable

for idx, row in completed_df.iterrows():
    row_type = row['Tag Type']
    current_row = start_row + idx
    
    if row_type == 'title':
        for cell in ws[current_row]:
            cell.font = title_font
            
    elif row_type == 'subtitle':
        for cell in ws[current_row]:
            cell.font = subtitle_font
            
    elif row_type == 'data':
        for cell in ws[current_row]:
            cell.font = data_font
            
    elif row_type == 'sum':
        for cell in ws[current_row]:
            cell.font = sum_font
            cell.border = double_border
            
# Adding commas to columns J:L
for col in range(10, 13):
    for row in range(1, ws.max_row + 1):
        cell = ws.cell(row=row, column=col)
        cell.number_format = comma_format
        
# Adding commas to column O
for col in range(15, 16):
    for row in range(1, ws.max_row + 1):
        cell = ws.cell(row=row, column=col)
        cell.number_format = comma_format
        
# Short date format for column P
for col in range(16, 17):
    for row in range(1, ws.max_row + 1):
        cell = ws.cell(row=row, column=col)
        cell.number_format = short_date_format

# Final formatting
# Clean out Column R
for row in ws.iter_rows(min_row=1, max_row=ws.max_row, min_col=18, max_col=18):
    for cell in row:
        cell.value = None
        cell.border = None
        
ws['Q5'] = "Comments"
temp_border = Border(left=Side(style='thin'), right=Side(style='thin'), top=Side(style='thin'), bottom=Side(style='thin'))
ws['Q5'].border = temp_border
            
# Saving
wb.save(output_file)

print(f"Report saved to {output_file}")



#################################



#################################
</productionModeScript>
          <Port>61277</Port>
          <JupyterGuidDir>50358496f563991ff7c0d69532ab3ca5</JupyterGuidDir>
          <JupyterGuidCopy />
          <LastExecutedByEngineVersion>2022.3.1.450</LastExecutedByEngineVersion>
          <Notebook><![CDATA[{"cells":[{"cell_type":"markdown","metadata":{"ayx":{"cell_css":"border: 3px solid #357; margin: 4px; background: #fbffff","contents_keyword":"Alteryx.help()","label":"info"}},"source":["Run `Alteryx.help()` for info about useful functions.  \n","i.e., `Alteryx.read(\"#1\")`, `Alteryx.write(df,1)`, `Alteryx.getWorkflowConstant(\"Engine.WorkflowDirectory\")`"]},{"cell_type":"code","execution_count":1,"metadata":{"ayx":{"cell_css":"border: 1px solid #58a; margin: 2px;","contents_keyword":"installPackages","label":"deps"}},"outputs":[],"source":["# List all non-standard packages to be imported by your \n","# script here (only missing packages will be installed)\n","from ayx import Package\n","# Package.installPackages(['openpyxl'])"]},{"cell_type":"code","execution_count":1,"metadata":{},"outputs":[],"source":["\"\"\"\n","Delinquency Report\n","@author: Chad Doorley\n","\"\"\"\n","\n","# This report automates a 30 minute task in Loan Review\n","# This is attached to loan review's monthly resolution package\n","\n","\n","### Environment Setup\n","from ayx import Alteryx\n","import pandas as pd\n","import numpy as np\n","from openpyxl import load_workbook\n","from openpyxl.styles import Font, Border, Side, Alignment\n","from openpyxl.styles.numbers import NumberFormat\n","import os\n","from datetime import datetime, timedelta\n","import json\n","from sqlalchemy import create_engine, text\n","import time"]},{"cell_type":"code","execution_count":2,"metadata":{},"outputs":[],"source":["class DatabaseHandler:\n","    \"\"\"\n","    This class abstracts the connection to the database and allows a clean\n","    interface for the developer to use.\n","    \n","    \"\"\"\n","    def __init__(self, tns_admin_path, credentials_path_db1, credentials_path_db2):\n","        \"\"\"\n","        Args:\n","            tns_admin_path (str): Oracle driver path\n","            credentials_path_db1 (str): Database 1 credentials path\n","            credentials_path_db1 (str): Databsae 2 credentials path\n","        \"\"\"\n","        os.environ['TNS_ADMIN'] = tns_admin_path\n","        \n","        with open(credentials_path_db1) as config_file:\n","            config1 = json.load(config_file)\n","            \n","        self.username1 = config1['username']\n","        self.password1 = config1['password']\n","        self.dsn1 = config1['dsn']\n","        \n","        with open(credentials_path_db2) as config_file:\n","            config2 = json.load(config_file)\n","            \n","        self.username2 = config2['username']\n","        self.password2 = config2['password']\n","        self.dsn2 = config2['dsn']\n","        \n","        self.connection_string1 = f'oracle+cx_oracle://{self.username1}:{self.password1}@{self.dsn1}'\n","        self.connection_string2 = f'oracle+cx_oracle://{self.username2}:{self.password2}@{self.dsn2}'\n","        \n","        self.engine1 = create_engine(self.connection_string1, max_identifier_length=128)\n","        self.engine2 = create_engine(self.connection_string2, max_identifier_length=128)\n","        \n","    def query(self, sql_query, engine=1):\n","        \"\"\"\n","        This allows abstraction of the connection and the class\n","        so the developer can query a single table as a dataframe\n","        \n","        Args:\n","            sql_query (str): The query to SQL database is passed as a string\n","            engine (int): This selects the database. There are two engines:\n","                1 -> R1625\n","                2 -> COCC DataMart\n","                \n","        Returns:\n","            df: The SQL query is returned as a pandas DataFrame\n","            \n","        Usage:\n","            df = db_handler.query(\"SELECT * FROM DB.TABLE\", engine=1)\n","            \n","            In this example, db_handler = DatabaseHandler(args)\n","        \"\"\"\n","        if engine == 1:\n","            selected_engine = self.engine1\n","        elif engine == 2:\n","            selected_engine = self.engine2\n","        else:\n","            raise ValueError(\"Engine must be 1 or 2\")\n","            \n","        with selected_engine.connect() as connection:\n","            df = pd.read_sql(sql_query, connection)\n","        return df"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Database Connection Configuration\n","tns_admin_path = r'C:\\Oracle2\\instantclient_21_13\\network\\admin'\n","credentials_path_db1 = r'\\\\10.161.85.66\\Home\\Share\\Alteryx_Admin\\Configuration\\Connection\\db_config_main.json'\n","credentials_path_db2 = r'\\\\10.161.85.66\\Home\\Share\\Alteryx_Admin\\Configuration\\Connection\\db_config_datamart.json'\n","db_handler = DatabaseHandler(tns_admin_path, credentials_path_db1, credentials_path_db2)"]},{"cell_type":"code","execution_count":2,"metadata":{},"outputs":[],"source":["def main():\n","    sql_table1, sql_table2 = query()\n","    df = combine_sql(sql_table1, sql_table2)\n","    df = clean_df\n","\n","\n","### Inputs --------------------------------------------------------------\n","df = Alteryx.read(\"#1\") # Currently iDashboard-generated\n","\n","### Pre-Processing --------------------------------------------------------------\n","df = df.drop('Product Family',axis=1) # Product Family Column (first column) is removed\n","\n","columns_to_sum = ['Current Balance','Charged Off','Net Balance'] # This will allow me to reference these specific columns for later sum() calls\n","\n","# Sum Function - Reusable\n","def sum_function(current_df,total_title):\n","    \"\"\" Sum Function\n","    \n","    Description:\n","    - This reusable function will count the number of records and sum the columns specified in\n","      the 'columns_to_sum' variable.\n","    \n","    Arguments:\n","    - current_df: A dataframe is passed in. It must have 'NDPD','Current Balance','Charged Off',\n","      and 'Net Balance' columns.\n","    - total_title: The summed row will need a label placed in the left most column. This is\n","      explicitly passed into the function as a string\n","      \n","    Returns:\n","    - summed_df: A new dataframe with only 1 row is created. with null values for all \n","    \n","    \"\"\"\n","    ndpd_count = len(current_df) # Counts the number of records in the dataframe\n","    sums = current_df[columns_to_sum].sum().to_dict() # Converts the sums for targeted columns as a python dictionary\n","    new_dictionary = {col: [sums.get(col, np.nan)] for col in current_df.columns} # Creates a new sum row to insert, with Null values for all other columns\n","    new_dictionary['NDPD'] = [ndpd_count]\n","    new_dictionary[current_df.columns[0]] = [total_title]\n","    summed_df = pd.DataFrame(new_dictionary)\n","    return summed_df\n","\n","# Join Function - Reusable\n","def join_function(section_title, subsection_title, current_section, summed_row):\n","    \"\"\" Join Function\n","    \n","    Description:\n","    - This reusable function will concatenate several dataframes together in a set order\n","    \n","    Arguments:\n","    - section_title: This is the major header for each section, like 'CONSUMER LOANS'\n","    - subsection_title: This is the subheader, such as '90+ Days Past Due'\n","    - current_section: The filtered data (df1) is passed in, containing the specific items\n","    - summed_row: The summed row is a result of the other 'Sum Function' and is the last row in each section\n","    \"\"\"\n","    dataframes = []\n","    if section_title is not None:\n","        dataframes.append(section_title) # 'None' is passed as an argument for sections where there is no section header\n","    dataframes.append(subsection_title) # The other three arguments are required\n","    dataframes.append(current_section) \n","    dataframes.append(summed_row)\n","    joined_df = pd.concat(dataframes, ignore_index=True)\n","    return joined_df # This sequence is repeated throughout workflow to join dataframes in a set structure\n","\n","# Remove Leading/Trailing Whitespace\n","def strip_if_string(value):\n","    \"\"\"This function removes leading and trailing whitespace from all string values in a dataframe\"\"\"\n","    if isinstance(value, str):\n","        return value.strip() # If it is a string, it will remove leading/trailing whitespace\n","    return value # Otherwise, it just return the value\n","    \n","# Data Cleaning\n","df = df.applymap(strip_if_string) # The 'strip_if_string' is applied to all values in the dataframe\n","\n","# Most recent month end\n","today = datetime.today()\n","if today.day == 1:\n","    most_recent_month_end = today - timedelta(days=1)\n","else:\n","    most_recent_month_end = today.replace(day=1) - timedelta(days=1)\n","most_recent_month_end_str = most_recent_month_end.strftime(\"%m/%d/%y\")\n","\n","### Section Outline --------------------------------------------------------------\n","\n","\n","## Section Title - Consumer Loans, 90+ Days Past Due \n","\n","# Variable definition\n","# This structure is repeated throughout the workflow.\n","df1_condition = (df['Product Name'].isin(['Unsecured Loans','Unsecured HEAT Loans',\"Flexi PRA's\",'TMLP Saves Loan'])) & (df['NDPD'] >= 90)\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data' # This data is labelled for formatting later on\n","\n","# Descriptive Labels\n","section_title = pd.DataFrame([['CONSUMER LOANS'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","section_title['Tag Type'] = 'title'\n","subsection_title = pd.DataFrame([['90+ DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 90+ DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","cns_90plus = completed_df # Consumer 90+ dataframe is stored in memory, to be used later on in the report output\n","\n","\n","## Section Title - Consumer Loans, 60-89 Days Past Due\n","# Variable definition\n","df1_condition = (df['Product Name'].isin(['Unsecured Loans','Unsecured HEAT Loans',\"Flexi PRA's\",'TMLP Saves Loan'])) & (df['NDPD'] >= 60) & (df['NDPD'] <= 89)\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = None\n","subsection_title = pd.DataFrame([['60-89 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 60-89 DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","cns_60to89 = completed_df\n","\n","\n","## Section Title - Consumer Loans, 30-59 Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Product Name'].isin(['Unsecured Loans','Unsecured HEAT Loans',\"Flexi PRA's\",'TMLP Saves Loan'])) & (df['NDPD'] >= 30) & (df['NDPD'] <= 59)\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = None\n","subsection_title = pd.DataFrame([['30-59 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 30-59 DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","cns_30to59 = completed_df\n","\n","\n","## Section Title - Consumer Loans, 15-29 Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Product Name'].isin(['Unsecured Loans','Unsecured HEAT Loans',\"Flexi PRA's\",'TMLP Saves Loan'])) & (df['NDPD'] >= 15) & (df['NDPD'] <= 29)\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = None\n","subsection_title = pd.DataFrame([['15-29 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 15-29 DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","cns_15to29 = completed_df\n","\n","\n","## Section Title - HOME EQUITY LINE OF CREDIT, 90+ Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Product Name'].isin(['Equity Line of Credit','Special HELOC'])) & (df['NDPD'] >= 90)\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = pd.DataFrame([['HOME EQUITY LINE OF CREDIT'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","section_title['Tag Type'] = 'title'\n","subsection_title = pd.DataFrame([['90+ DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 90+ DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","heloc_90plus = completed_df\n","\n","\n","## Section Title - HOME EQUITY LINE OF CREDIT, 60-89 Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Product Name'].isin(['Equity Line of Credit','Special HELOC'])) & (df['NDPD'] >= 60) & (df['NDPD'] <= 89)\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = None\n","subsection_title = pd.DataFrame([['60-89 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 60-89 DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","heloc_60to89 = completed_df\n","\n","\n","## Section Title - HOME EQUITY LINE OF CREDIT, 30-59 Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Product Name'].isin(['Equity Line of Credit','Special HELOC'])) & (df['NDPD'] >= 30) & (df['NDPD'] <= 59)\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = None\n","subsection_title = pd.DataFrame([['30-59 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 30-59 DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","heloc_30to59 = completed_df\n","\n","\n","## Section Title - HOME EQUITY LINE OF CREDIT, 15-29 Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Product Name'].isin(['Equity Line of Credit','Special HELOC'])) & (df['NDPD'] >= 15) & (df['NDPD'] <= 29)\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = None\n","subsection_title = pd.DataFrame([['15-29 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 15-29 DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","heloc_15to29 = completed_df\n","\n","\n","## Section Title - INDIRECT, 90+ Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Product Name'].str.contains('Indirect',case=False, na=False)) & (df['NDPD'] >= 90)\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = pd.DataFrame([['INDIRECT LOANS'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","section_title['Tag Type'] = 'title'\n","subsection_title = pd.DataFrame([['90+ DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 90+ DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","indirect_90plus = completed_df\n","\n","\n","\n","## Section Title - INDIRECT, 60-89 Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Product Name'].str.contains('Indirect',case=False, na=False)) & (df['NDPD'] >= 60) & (df['NDPD'] <= 89)\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = None\n","subsection_title = pd.DataFrame([['60-89 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 60-89 DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","indirect_60to89 = completed_df\n","\n","\n","## Section Title - INDIRECT, 30-59 Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Product Name'].str.contains('Indirect',case=False, na=False)) & (df['NDPD'] >= 30) & (df['NDPD'] <= 59)\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = None\n","subsection_title = pd.DataFrame([['30-59 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 30-59 DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","# df1 = None # This makes this section subtotal only, as it would exhaustive to show all of them\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","indirect_30to59 = completed_df\n","\n","\n","## Section Title - INDIRECT, 15-29 Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Product Name'].str.contains('Indirect',case=False, na=False)) & (df['NDPD'] >= 15) & (df['NDPD'] <= 29)\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = None\n","subsection_title = pd.DataFrame([['15-29 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 15-29 DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","# df1 = None # This makes this section subtotal only, as it would exhaustive to show all of them\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","indirect_15to29 = completed_df\n","\n","\n","## Section Title - RESIDENTIAL, 90+ Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Major'] == 'MTG') & (~df['Product Name'].isin(['Equity Line of Credit','Special HELOC'])) & (df['NDPD'] >= 90)\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = pd.DataFrame([['RESIDENTIAL MORTGAGES'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","section_title['Tag Type'] = 'title'\n","subsection_title = pd.DataFrame([['90+ DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 90+ DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","resi_90plus = completed_df\n","\n","\n","## Section Title - RESIDENTIAL, 60-89 Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Major'] == 'MTG') & (~df['Product Name'].isin(['Equity Line of Credit','Special HELOC'])) & (df['NDPD'] >= 60) & (df['NDPD'] <= 89)\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = None\n","subsection_title = pd.DataFrame([['60-89 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 60-89 DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","resi_60to89 = completed_df\n","\n","## Section Title - RESIDENTIAL, 30-59 Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Major'] == 'MTG') & (~df['Product Name'].isin(['Equity Line of Credit','Special HELOC'])) & (df['NDPD'] >= 30) & (df['NDPD'] <= 59)\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = None\n","subsection_title = pd.DataFrame([['30-59 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 30-59 DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","resi_30to59 = completed_df\n","\n","\n","## Section Title - RESIDENTIAL, 15-29 Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Major'] == 'MTG') & (~df['Product Name'].isin(['Equity Line of Credit','Special HELOC'])) & (df['NDPD'] >= 15) & (df['NDPD'] <= 29)\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = None\n","subsection_title = pd.DataFrame([['15-29 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 15-29 DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","resi_15to29 = completed_df # By this point, all residential loans are captured and stored in memory\n","\n","\n","## Section Title - COMMERCIAL, 90+ Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Major'] == 'CML') & (df['Net Balance'] != 0) & (df['NDPD'] >= 90) # This captures CML loans with a non-zero Net Balance. Those with a $0 Balance are captured in another section below\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = pd.DataFrame([['COMMERCIAL LOANS'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","section_title['Tag Type'] = 'title'\n","subsection_title = pd.DataFrame([['90+ DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 90+ DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","cml_90plus = completed_df\n","\n","\n","## Section Title - COMMERCIAL, 60-89 Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Major'] == 'CML') & (df['Net Balance'] != 0) & (df['NDPD'] >= 60) & (df['NDPD'] <= 89) # This captures CML loans with a non-zero Net Balance. Those with a $0 Balance are captured in another section below\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = None\n","subsection_title = pd.DataFrame([['60-89 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 60-89 DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","cml_60to89 = completed_df\n","\n","\n","## Section Title - COMMERCIAL, 30-59 Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Major'] == 'CML') & (df['Net Balance'] != 0) & (df['NDPD'] >= 30) & (df['NDPD'] <= 59) # This captures CML loans with a non-zero Net Balance. Those with a $0 Balance are captured in another section below\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = None\n","subsection_title = pd.DataFrame([['30-59 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 30-59 DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","cml_30to59 = completed_df\n","\n","\n","## Section Title - COMMERCIAL, 15-29 Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Major'] == 'CML') & (df['Net Balance'] != 0) & (df['NDPD'] >= 15) & (df['NDPD'] <= 29) # This captures CML loans with a non-zero Net Balance. Those with a $0 Balance are captured in another section below\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = None\n","subsection_title = pd.DataFrame([['15-29 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 15-29 DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","cml_15to29 = completed_df\n","\n","\n","## Section Title - COMMERCIAL PEM, 90+ Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Risk'].str.contains('3P',case=False, na=False)) & (df['NDPD'] >= 90) # This captures CML loans with a non-zero Net Balance. Those with a $0 Balance are captured in another section below\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = pd.DataFrame([['COMMERCIAL LOANS - PORTFOLIO EXCEPTIONS MANAGED'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","section_title['Tag Type'] = 'title'\n","subsection_title = pd.DataFrame([['90+ DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 90+ DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","pem_90plus = completed_df\n","\n","\n","## Section Title - COMMERCIAL PEM, 60-89 Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Risk'].str.contains('3P',case=False, na=False)) & (df['NDPD'] >= 60) & (df['NDPD'] <= 89) # This captures CML loans with a non-zero Net Balance. Those with a $0 Balance are captured in another section below\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = None\n","subsection_title = pd.DataFrame([['60-89 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 60-89 DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","pem_60to89 = completed_df\n","\n","\n","## Section Title - COMMERCIAL PEM, 30-59 Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Risk'].str.contains('3P',case=False, na=False)) & (df['NDPD'] >= 30) & (df['NDPD'] <= 59) # This captures CML loans with a non-zero Net Balance. Those with a $0 Balance are captured in another section below\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = None\n","subsection_title = pd.DataFrame([['30-59 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 30-59 DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","pem_30to59 = completed_df\n","\n","\n","## Section Title - COMMERCIAL PEM, 15-29 Days Past Due\n","\n","# Variable definition\n","df1_condition = (df['Risk'].str.contains('3P',case=False, na=False)) & (df['NDPD'] >= 15) & (df['NDPD'] <= 29) # This captures CML loans with a non-zero Net Balance. Those with a $0 Balance are captured in another section below\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = None\n","subsection_title = pd.DataFrame([['15-29 DAYS PAST DUE'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns) # 'Consumer Loans' is placed in the first column with null values for all the other columns\n","subsection_title['Tag Type'] = 'subtitle'\n","\n","# Completed Section\n","summed_row = sum_function(df1,'TOTAL 15-29 DAYS PAST DUE')\n","summed_row['Tag Type'] = 'sum'\n","\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","pem_15to29 = completed_df\n","\n","\n","## Section Title - COMMERCIAL NET BALANCE PAID OR REDUCED TO $0\n","\n","# Variable definition\n","df1_condition = (df['Major'] == 'CML') & (df['Net Balance'] == 0) # This captures CML loans where Net Balance is paid or reduced to $0\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = pd.DataFrame([['NET BALANCE PAID or REDUCED TO $O'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns)\n","section_title['Tag Type'] = 'title'\n","subsection_title = None \n","\n","\n","# Completed Section\n","summed_row = None\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","netbalancezero = completed_df\n","\n","\n","## Section Title - REPOSSESSED\n","\n","# Variable definition\n","df1_condition = (df['Product Name'].str.contains('Repossessed Collateral', case=False, na=False)) # Repo Loans\n","df1 = df.loc[df1_condition].copy()\n","df1 = df1.sort_values(by='NDPD', ascending=False)\n","df1['Tag Type'] = 'data'\n","\n","# Descriptive Labels\n","section_title = pd.DataFrame([['REPOSSESSED'] + [np.nan] * (df1.shape[1] - 1)], columns=df1.columns)\n","section_title['Tag Type'] = 'title'\n","subsection_title = None \n","\n","# Completed Section\n","summed_row = None\n","completed_df = join_function(section_title, subsection_title, df1, summed_row)\n","\n","# Save df to memory\n","repo = completed_df\n","\n","\n","### Combined and Completed Report --------------------------------------------------------------\n","# Here all dfs are stored in a list\n","all_dfs = [cns_90plus,cns_60to89,cns_30to59,cns_15to29,heloc_90plus,heloc_60to89,heloc_30to59,heloc_15to29,indirect_90plus,indirect_60to89,indirect_30to59,indirect_15to29,resi_90plus,resi_60to89,resi_30to59,resi_15to29,cml_90plus,cml_60to89,cml_30to59,cml_15to29,pem_90plus,pem_60to89,pem_30to59,pem_15to29,netbalancezero,repo]\n","\n","concat_dfs = [] # Empty list to store dataframes\n","\n","for i,df in enumerate(all_dfs):\n","    concat_dfs.append(df) # Each dataframe\n","    if i < len(all_dfs) - 1:\n","        concat_dfs.append(pd.DataFrame([[None]*df.shape[1]], columns=df.columns)) # Null row\n","    \n","completed_df = pd.concat(concat_dfs, ignore_index=True)\n","\n","### WRITING TO EXCEL --------------------------------------------------------------\n","\n","## Set Directory and Filename\n","output_dir = r\"\\\\10.161.85.66\\Home\\Share\\Line of Business_Shared Services\\Commercial Credit\\FinishedReports\\RC\\Delinquency\\OUTPUT\"\n","os.makedirs(output_dir, exist_ok=True)\n","filename = \"Delinquency.xlsx\"\n","output_file = os.path.join(output_dir,filename)\n","\n","with pd.ExcelWriter(output_file, engine='openpyxl', mode='w') as writer:\n","    completed_df.to_excel(writer, index=False, sheet_name='Sheet1', startrow=4)\n","\n","wb = load_workbook(output_file)\n","ws = wb.active\n","\n","## Define Formatting\n","# Dimensions\n","ws.row_dimensions[5].height = 44\n","\n","ws.column_dimensions['A'].width = 13\n","ws.column_dimensions['B'].width = 29\n","ws.column_dimensions['C'].width = 32\n","ws.column_dimensions['D'].width = 20\n","ws.column_dimensions['E'].width = 5\n","ws.column_dimensions['F'].width = 5\n","ws.column_dimensions['G'].width = 5\n","ws.column_dimensions['H'].width = 5\n","ws.column_dimensions['I'].width = 6\n","ws.column_dimensions['J'].width = 12\n","ws.column_dimensions['K'].width = 10\n","ws.column_dimensions['L'].width = 12\n","ws.column_dimensions['M'].width = 29\n","ws.column_dimensions['N'].width = 8\n","ws.column_dimensions['O'].width = 13\n","ws.column_dimensions['P'].width = 10\n","ws.column_dimensions['Q'].width = 46\n","\n","\n","\n","# Font\n","upper_section_font = Font(size=14, name='Calibri', bold=True, italic=True)\n","title_font = Font(size=12, name='Arial', bold=True)\n","subtitle_font = Font(size=10, name='Arial', bold=True)\n","data_font = Font(size=10, name='Arial')\n","sum_font = Font(size=10, name='Arial', bold=True)\n","wrap_alignment = Alignment(wrap_text=True, vertical='bottom', horizontal='center')\n","comma_format = '#,##0.00'\n","short_date_format = 'MM/DD/YYYY'\n","\n","\n","# Border\n","double_border = Border(bottom=Side(style='double'))\n","\n","# Header\n","ws['A1'] = \"BRISTOL COUNTY SAVINGS BANK\"\n","ws['A1'].font = upper_section_font\n","ws['A2'] = \"MONTHLY DELINQUENCY REPORT\"\n","ws['A2'].font = upper_section_font\n","ws['A3'] = f\"AS OF {most_recent_month_end_str}\"\n","ws['A3'].font = upper_section_font\n","\n","\n","\n","# Clean out Column Q\n","for row in ws.iter_rows(min_row=1, max_row=ws.max_row, min_col=17, max_col=17):\n","    for cell in row:\n","        cell.value = None\n","        \n","\n","# Center Align Columns E:I\n","for col in range(5,10):\n","    for cell in ws.iter_cols(min_col=col, max_col=col, min_row=1, max_row=ws.max_row):\n","        for c in cell:\n","            c.alignment = Alignment(horizontal='center')\n","            \n","# Center Align Columns M:N\n","for col in range(13,15):\n","    for cell in ws.iter_cols(min_col=col, max_col=col, min_row=1, max_row=ws.max_row):\n","        for c in cell:\n","            c.alignment = Alignment(horizontal='center')\n","\n","# for cell in ws['P']:\n","#     cell.number_format = NumberFormat('%m/%d/%y')\n","\n","## Iterate over rows and apply formatting\n","for cell in ws[5]:\n","    cell.alignment = wrap_alignment\n","    \n","start_row = 6 # This is a counter variable\n","\n","for idx, row in completed_df.iterrows():\n","    row_type = row['Tag Type']\n","    current_row = start_row + idx\n","    \n","    if row_type == 'title':\n","        for cell in ws[current_row]:\n","            cell.font = title_font\n","            \n","    elif row_type == 'subtitle':\n","        for cell in ws[current_row]:\n","            cell.font = subtitle_font\n","            \n","    elif row_type == 'data':\n","        for cell in ws[current_row]:\n","            cell.font = data_font\n","            \n","    elif row_type == 'sum':\n","        for cell in ws[current_row]:\n","            cell.font = sum_font\n","            cell.border = double_border\n","            \n","# Adding commas to columns J:L\n","for col in range(10, 13):\n","    for row in range(1, ws.max_row + 1):\n","        cell = ws.cell(row=row, column=col)\n","        cell.number_format = comma_format\n","        \n","# Adding commas to column O\n","for col in range(15, 16):\n","    for row in range(1, ws.max_row + 1):\n","        cell = ws.cell(row=row, column=col)\n","        cell.number_format = comma_format\n","        \n","# Short date format for column P\n","for col in range(16, 17):\n","    for row in range(1, ws.max_row + 1):\n","        cell = ws.cell(row=row, column=col)\n","        cell.number_format = short_date_format\n","\n","# Final formatting\n","# Clean out Column R\n","for row in ws.iter_rows(min_row=1, max_row=ws.max_row, min_col=18, max_col=18):\n","    for cell in row:\n","        cell.value = None\n","        cell.border = None\n","        \n","ws['Q5'] = \"Comments\"\n","temp_border = Border(left=Side(style='thin'), right=Side(style='thin'), top=Side(style='thin'), bottom=Side(style='thin'))\n","ws['Q5'].border = temp_border\n","            \n","# Saving\n","wb.save(output_file)\n","\n","print(f\"Report saved to {output_file}\")\n"]},{"cell_type":"code","execution_count":5,"metadata":{},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"designerbasetools_venv","language":"python","name":"designerbasetools_venv"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"nbformat":4,"nbformat_minor":2}]]></Notebook>
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
      <EngineSettings EngineDll="AlteryxJupyterPluginEngine.dll" EngineDllEntryPoint="AlteryxJupyter" />
    </Node>
    <Node ToolID="6">
      <GuiSettings Plugin="AlteryxGuiToolkit.ToolContainer.ToolContainer">
        <Position x="245" y="54" width="145" height="133" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <Caption>Container 6</Caption>
          <Style TextColor="#314c4a" FillColor="#ecf2f2" BorderColor="#314c4a" Transparency="25" Margin="25" />
          <Disabled value="True" />
          <Folded value="False" />
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
      <ChildNodes>
        <Node ToolID="3">
          <GuiSettings Plugin="AlteryxBasePluginsGui.BrowseV2.BrowseV2">
            <Position x="270" y="103" />
          </GuiSettings>
          <Properties>
            <Configuration>
              <TempFile>C:\Users\w322800\AppData\Local\Temp\Engine_8372_b497b59165aa5241a101a6031cd64b50_\Engine_8372_d11deafcbb274a4ea4ce3fbc91c32f3a~.yxdb</TempFile>
              <TempFileDataProfiling />
              <Layout>
                <ViewMode>Single</ViewMode>
                <ViewSize value="100" />
                <View1>
                  <DefaultTab>Profile</DefaultTab>
                  <Hints>
                    <Table />
                  </Hints>
                </View1>
                <View2 />
              </Layout>
            </Configuration>
            <Annotation DisplayMode="0">
              <Name />
              <DefaultAnnotationText />
              <Left value="False" />
            </Annotation>
          </Properties>
          <EngineSettings EngineDll="AlteryxBasePluginsEngine.dll" EngineDllEntryPoint="AlteryxBrowseV2" />
        </Node>
      </ChildNodes>
    </Node>
  </Nodes>
  <Connections>
    <Connection>
      <Origin ToolID="1" Connection="Output" />
      <Destination ToolID="2" Connection="Input" />
    </Connection>
    <Connection>
      <Origin ToolID="2" Connection="Output" />
      <Destination ToolID="3" Connection="Input" />
    </Connection>
    <Connection name="#1">
      <Origin ToolID="2" Connection="Output" />
      <Destination ToolID="5" Connection="Input" />
    </Connection>
  </Connections>
  <Properties>
    <Memory default="True" />
    <GlobalRecordLimit value="0" />
    <TempFiles default="True" />
    <Annotation on="True" includeToolName="False" />
    <ConvErrorLimit value="10" />
    <ConvErrorLimit_Stop value="False" />
    <CancelOnError value="False" />
    <DisableBrowse value="False" />
    <EnablePerformanceProfiling value="False" />
    <RunWithE2 value="True" />
    <PredictiveToolsCodePage value="1252" />
    <DisableAllOutput value="False" />
    <ShowAllMacroMessages value="False" />
    <ShowConnectionStatusIsOn value="True" />
    <ShowConnectionStatusOnlyWhenRunning value="True" />
    <ZoomLevel value="0" />
    <LayoutType>Horizontal</LayoutType>
    <MetaInfo>
      <NameIsFileName value="True" />
      <Name>Delinquency_refactoring</Name>
      <Description />
      <RootToolName />
      <ToolVersion />
      <ToolInDb value="False" />
      <CategoryName />
      <SearchTags />
      <Author />
      <Company />
      <Copyright />
      <DescriptionLink actual="" displayed="" />
      <Example>
        <Description />
        <File />
      </Example>
      <WorkflowId value="81dadc27-01ab-4a9a-9671-0c27c3d01483" />
      <Telemetry>
        <PreviousWorkflowId value="004552b4-79ba-4aa7-b3f9-c5ff449900fc" />
        <OriginWorkflowId value="5a9154d9-c079-44eb-9a3b-1194f0b84d78" />
      </Telemetry>
    </MetaInfo>
    <Events>
      <Enabled value="True" />
    </Events>
  </Properties>
</AlteryxDocument>