#################################
# List all non-standard packages to be imported by your 
# script here (only missing packages will be installed)
from ayx import Package
#Package.installPackages(['pandas','numpy'])


#################################
"""
Concentration Reports
@ Chad Doorley
2024-09-24
"""

from ayx import Alteryx
import pandas as pd
import numpy as np
from datetime import datetime, timedelta


#################################
# Create sample data
np.random.seed(42)
num_records = 10

data = {
    'acctnbr': [f'{i:05d}' for i in range(1, num_records + 1)],
    'customer_name': [f'Customer {i}' for i in range(1, num_records + 1)],
    'officer': np.random.choice(['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], num_records),
    'contract_date': [datetime.now().date() - timedelta(days=np.random.randint(1, 365)) for _ in range(num_records)],
    'balance': np.random.uniform(1000, 100000, num_records).round(2),
    'interest_rate': np.random.uniform(0.01, 0.05, num_records).round(4),
    'household_number': np.random.choice([123456, 234567, 345678], num_records)
}

# Create the DataFrame
df = pd.DataFrame(data)


#################################
# Set acctnbr as the primary key (index)
df.set_index('acctnbr', inplace=True)

# Display the DataFrame
# print(df)

def group_by_household(df):
    """
    Group the input DataFrame by household, sort by total balance, and format the output.

    This function processes account information, grouping it by household and adding summary rows.
    It also sorts the data to present households with the highest total balances first.

    Args:
        df (pandas.DataFrame): Input DataFrame containing account information.

    Returns:
        pandas.DataFrame: A new DataFrame grouped by household, including:
            - Individual account records
            - Household total balance rows
            - Empty rows for visual separation
        The DataFrame is sorted by descending total household balance.

    Operations:
        1. Reset index to make acctnbr a column.
        2. Sort data by household_number and balance (descending).
        3. Group data by household_number.
        4. Calculate and sort total balances for each household.
        5. Create a new DataFrame with household records, sum rows, and empty rows.
        6. Ensure acctnbr is the first column in the result.
    """
    # Reset index to make acctnbr a column
    df = df.reset_index()
    
    # Sort the DataFrame by household_number and balance in descending order
    df_sorted = df.sort_values(['household_number', 'balance'], ascending=[True, False])
    
    # Group by household_number
    grouped = df_sorted.groupby('household_number')
    
    # Calculate total balance for each household
    household_totals = grouped['balance'].sum().sort_values(ascending=False)
    
    # Create a new DataFrame to store the result
    result = pd.DataFrame()
    
    for household in household_totals.index:
        # Get records for the current household
        household_records = grouped.get_group(household)
        
        # Add records to the result DataFrame
        result = pd.concat([result, household_records])
        
        # Add a sum row for the household
        sum_row = pd.DataFrame({
            'acctnbr': [''],
            'customer_name': ['Total'],
            'officer': [''],
            'contract_date': [pd.NaT],
            'balance': [household_records['balance'].sum()],
            'interest_rate': [np.nan],
            'household_number': [household]
        })
        
        result = pd.concat([result, sum_row])
        
        # Add an empty row
        empty_row = pd.DataFrame({
            'acctnbr': [f'{household}_empty'],
            'customer_name': [''],
            'officer': [''],
            'contract_date': [pd.NaT],
            'balance': [np.nan],
            'interest_rate': [np.nan],
            'household_number': [np.nan]
        })
        result = pd.concat([result, empty_row])
    
    # Ensure acctnbr is the first column
    columns = ['acctnbr'] + [col for col in result.columns if col != 'acctnbr']
    result = result[columns]
    
    return result




#################################
# Example usage:
grouped_df = group_by_household(df)
print(grouped_df)

# grouped_df.to_csv('grouped_df.csv')



#################################
Â 